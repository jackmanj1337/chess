actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group #lightblue Registration #white
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
break User with username already exists
DataAccess --> Service: UserData
Service --> Server: AlreadyTakenException
Server --> Client: 403\n{"message": "Error: username already taken"}
end
DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db:Add UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group #orange Login #white
Client -> Server: [POST] /session\n{username, password}
Server -> Handler: {"username":" ", "password":" "}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
break User with username does not exist
DataAccess --> Service: null
Service --> Server: DoesNotExistException
Server --> Client: 404\n{"message": "Error: No User with that username exists"}
end
DataAccess --> Service: user exists
Service -> DataAccess:verifyPassword(username, password)
DataAccess -> db:Confirm password for username
break Incorrect Password for username
DataAccess --> Service:false
Service --> Server: IncorrectPasswordException
Server --> Client: 400\n{"message": "Error: Incorrect Password"}
end
DataAccess --> Service:true
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: LoginResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}

end

group #green Logout #white
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: logout{"authToken": """ "}
Handler -> Service: logout(authToken)
Service -> DataAccess:deleteToken(authToken)
DataAccess -> db: Delete AuthData
break authToken does not exist
DataAccess --> Service:false
Service --> Server: ImaginaryAuthTokenException
Server --> Client: 404\n{"message": "Error: AuthToken does not exist"}
end
DataAccess --> Service: true
Service --> Handler: true
Handler --> Server: {}
Server --> Client: 200
end

group #red List Games #white
Client -> Server: [GET] /game\nauthToken
Server -> Handler: listAllGames{"authToken": " "}
Handler -> Service: listAllGames(authToken)
Service -> DataAccess: listAllGames(authToken)
DataAccess -> db: listAllGames(authToken)
DataAccess --> Service: Collection<Gamedata>
Service --> Handler: Collection<Gamedata>
Handler --> Server:{ "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""} ]}
Server --> Client:[200] { "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""} ]}
end

group #purple Create Game #white
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server -> Handler: createGame{"authToken": " ", "gameID": " "}
Handler -> Service: createGame(authToken, "gameID": " ")
Service -> DataAccess: validateAuthToken(authToken)
DataAccess -> db: find AuthData
DataAccess --> Service:AuthData
Service -> DataAccess: doesGameExist(gameID)
DataAccess -> db:find gameID
break gameID in use 
DataAccess --> Service:gameIDInUse
Service --> Server: GameIDInUseException
Server --> Client: 500\n{"message": "Error: GameID is allready in use"}
end
DataAccess --> Service: GameIDAvailable
Service -> DataAccess: createGame(AuthToken, gameID)
DataAccess -> db: create new game data
DataAccess --> Service: gameID
Service --> Handler: gameID
Handler --> Server: {"gameID": " "}
Server --> Client: {"gameID": " "}
end

group #yellow Join Game #black
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server -> Handler: joinGame{"authToken": " ", "gameID": " ", "playerPosition": " "}
Handler -> Service: joinGame(authToken,  "gameID": " ", "playerPosition": " ")
Service -> DataAccess: validateAuthToken(authToken)
DataAccess -> db: find AuthData
DataAccess --> Service:AuthData
Service -> DataAccess: isPositionOpen(gameID, position)
DataAccess -> db:find gameID
break position occupied 
DataAccess --> Service:PositionOccupied
Service --> Server: PositionOccupiedException
Server --> Client: 500\n{"message": "Error: Position is occupied"}
end
DataAccess --> Service: PositionAvailable
Service -> DataAccess: joinGame(AuthToken, gameID, position)
DataAccess -> db: add player to game at position
DataAccess --> Service: GameData
Service --> Handler: GameData
Handler --> Server: {"gameID": " ", "gamePosition": " "}
Server --> Client: {"gameID": " ", "gamePosition": " "}
end

group #gray Clear application #white
Client -> Server: [DELETE] /db
Server -> Handler: clearAll()
Handler -> Service: clearAll()
Service -> DataAccess: clearAll()
DataAccess -> db: Delete all records
DataAccess --> Service:success
Service --> Handler:success
Handler --> Server:success
Server --> Client: [200]
end
